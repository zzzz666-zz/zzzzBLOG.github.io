{"meta":{"title":"zzzz的个人博客网站","subtitle":"","description":"zzzz的个人博客网站","author":"即兴表演","url":"https://www.zzzheng.top","root":"/"},"pages":[{"title":"about","date":"2022-08-30T06:51:58.000Z","updated":"2022-08-30T08:07:41.852Z","comments":true,"path":"about/index.html","permalink":"https://www.zzzheng.top/about/index.html","excerpt":"","text":"一个来自zjsu的小菜鸡,欢迎讨论和交流~"},{"title":"categories","date":"2022-08-30T11:25:34.000Z","updated":"2022-08-30T11:27:50.702Z","comments":false,"path":"categories/index.html","permalink":"https://www.zzzheng.top/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-08-30T07:08:45.000Z","updated":"2022-08-30T07:57:50.089Z","comments":true,"path":"tags/index.html","permalink":"https://www.zzzheng.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"SSM整合配置文件","slug":"SSM整合配置文件","date":"2022-08-29T13:25:35.000Z","updated":"2022-08-30T11:30:44.089Z","comments":true,"path":"2022/08/29/SSM整合配置文件/","link":"","permalink":"https://www.zzzheng.top/2022/08/29/SSM%E6%95%B4%E5%90%88%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/","excerpt":"我这里主要是跟的尚硅谷的一个比较老的版本的一个SSM整合，本人也是个小菜鸡，欢迎指正错误和讨论哈，部分是我修改的，大部分都是参照视频里的。","text":"我这里主要是跟的尚硅谷的一个比较老的版本的一个SSM整合，本人也是个小菜鸡，欢迎指正错误和讨论哈，部分是我修改的，大部分都是参照视频里的。 配置web.xml 启动一个web项目时，容器（如tomcat）会去读web.xml, 先读取context-param和listener监听器两个结点，然后再读取filter和servlet。所以我们第一步要配置web.xml。 配置Spring第一步当然是配置Spring，因为在web.xml 里要配置servlet，而我们会使用SpringMvc的dispatchServlet，都需要交给Spring来管理。 &lt;!--1、启动Spring的容器--&gt; &lt;context-param&gt; &lt;!--Spring的配置文件信息--&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; contextConfigLocation主要是告诉一个Spring的配置文件的地址，通常会放在main&#x2F;resources&#x2F;applicationContext.xml。这里不配置context-param也可以,因为Spring是有默认的一个配置文件的位置的。ContextLoaderListener这个listener必须要配置，主要作用是来监听服务器的启动。 配置前端控制器&lt;servlet&gt; &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; 主要配置的是DispatchServlet，同样也指定了一个SpringMVC的配置文件位置。load-on-startup可以设置servlet的加载优先级别和容器是否在启动时加载该servlet。 配置过滤器filter&lt;!--字符编码过滤器,要放在所有过滤器的首位--&gt; &lt;filter&gt; &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;!--这两个参数用于初始化CharacterEncodingFilter,可以查看CharacterEncodingFilter的初始化--&gt; &lt;init-param&gt; &lt;param-name&gt;forceResponseEncoding&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;utf-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;!--配置转换请求方式的filter,将页面普通的post请求转为指定的delete或put请求--&gt; &lt;filter&gt; &lt;filter-name&gt;hiddenHttpMethodFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;hiddenHttpMethodFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; 主要是一个字符编码过滤器和一个转换请求方式的filter。 配置SpringMVC.xmlspringmvc的配置文件主要有三部分，第一个部分是对Controller放入IOC容器中进行管理，第二部分是视图解析器，第三部分是一些默认跳转或者是处理静态资源的配置。 &lt;context:component-scan base-package&#x3D;”com.atguigu.curd.controller”&gt; &lt;!--配置视图解析器--&gt; &lt;!-- 配置Thymeleaf视图解析器 --&gt; &lt;bean id=&quot;viewResolver&quot; class=&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;&gt; &lt;property name=&quot;order&quot; value=&quot;1&quot;/&gt; &lt;property name=&quot;characterEncoding&quot; value=&quot;UTF-8&quot;/&gt; &lt;property name=&quot;templateEngine&quot;&gt; &lt;bean class=&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;&gt; &lt;property name=&quot;templateResolver&quot;&gt; &lt;bean class=&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;&gt; &lt;!-- 视图前缀 --&gt; &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/templates/&quot;/&gt; &lt;!-- 视图后缀 --&gt; &lt;property name=&quot;suffix&quot; value=&quot;.html&quot;/&gt; &lt;property name=&quot;templateMode&quot; value=&quot;HTML&quot;/&gt; &lt;property name=&quot;characterEncoding&quot; value=&quot;UTF-8&quot; /&gt; &lt;/bean&gt; &lt;/property&gt; &lt;/bean&gt; &lt;/property&gt; &lt;/bean&gt; &lt;mvc:view-controller path=&quot;/&quot; view-name=&quot;index&quot;/&gt; &lt;!--两个标准配置--&gt; &lt;!--将springMVC不能处理的请求交给tomcat--&gt; &lt;!--处理静态资源--&gt; &lt;mvc:default-servlet-handler/&gt; &lt;!--能支持springMVC更高级的一些功能，JSR303校验，快捷的ajax请求...映射动态请求--&gt; &lt;mvc:annotation-driven/&gt; 其实thymeleaf也没怎么用上，前端大部分时间使用的是vue，虽然用的很垃圾。 配置SpringSpring配置文件的核心点(数据源、与MyBatis的整合、事务的控制) &lt;!--数据源、事务控制--&gt; &lt;!--开启扫描--&gt; &lt;context:component-scan base-package=&quot;com.atguigu&quot;&gt; &lt;!--controller交由SpringMVC管理,所以这里要去掉--&gt; &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt; &lt;/context:component-scan&gt; &lt;!--引入外部配置文件--&gt; &lt;context:property-placeholder location=&quot;classpath:dbconfig.properties&quot;&gt;&lt;/context:property-placeholder&gt; &lt;bean id=&quot;pooledDataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot; destroy-method=&quot;close&quot;&gt; &lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbc.jdbcUrl&#125;&quot;&gt;&lt;/property&gt; &lt;property name=&quot;driverClass&quot; value=&quot;$&#123;jdbc.driverClass&#125;&quot;&gt;&lt;/property&gt; &lt;property name=&quot;user&quot; value=&quot;$&#123;jdbc.user&#125;&quot;&gt;&lt;/property&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;!--配置和MyBatis的整合--&gt; &lt;bean id=&quot;sqlSessionFactoryBuilder&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;!--指定MyBatis的全局配置文件的位置--&gt; &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;/&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;pooledDataSource&quot;/&gt; &lt;!--&lt;property name=&quot;dataSource&quot; ref=&quot;pooledDataSource&quot;/&gt;--&gt; &lt;!--指定mybatis，mapper文件的位置--&gt; &lt;!--这里的不要和mybatis-config.xml的配置重复了，保留此处即可--&gt; &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/atguigu/curd/dao/*.xml&quot;/&gt; &lt;/bean&gt; &lt;!--配置扫描器，将mybatis接口的实现加入到IOC容器管理。 --&gt; &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt; &lt;!--扫描所有dao接口的实现，加入到IOC容器中--&gt; &lt;property name=&quot;basePackage&quot; value=&quot;com.atguigu.curd.dao&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;!--事务控制的配置--&gt; &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt; &lt;!--控制数据源--&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;pooledDataSource&quot;/&gt; &lt;/bean&gt; &lt;!--配置一个可以批量插入的sqlSession--&gt; &lt;bean class=&quot;org.mybatis.spring.SqlSessionTemplate&quot; id=&quot;sqlSession&quot;&gt; &lt;constructor-arg name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactoryBuilder&quot;/&gt; &lt;constructor-arg name=&quot;executorType&quot; value=&quot;BATCH&quot;/&gt; &lt;/bean&gt; &lt;!--开启基于注解的事务，使用xml配置形式的事务(必要主要的都是使用配置式)--&gt; &lt;!--配置事务增强,事务如何切入--&gt; &lt;aop:config&gt; &lt;!--切入点表达式--&gt; &lt;aop:pointcut id=&quot;txPoint&quot; expression=&quot;execution(* com.atguigu.curd.service..*.*(..))&quot;/&gt; &lt;!--配置事务增强--&gt; &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;txPoint&quot;/&gt; &lt;/aop:config&gt; &lt;!--配置事务增强，配置事务如何切入--&gt; &lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt; &lt;tx:attributes&gt; &lt;!--所有方法都是事务方法--&gt; &lt;tx:method name=&quot;*&quot;/&gt; &lt;!--以get开始的所有方法--&gt; &lt;tx:method name=&quot;get*&quot; read-only=&quot;true&quot;/&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; &lt;!--开启基于注解的事务，使用xml配置形式的事务（必要主要的都是使用配置式）--&gt; MyBatis的配置&lt;!--自动驼峰命名转换,主要是为了转换一个pojo的属性和数据库的命名不一致的问题--&gt; &lt;settings&gt; &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt; &lt;/settings&gt; &lt;!--这个标签的主要目的是起别名,在mapper.xml 里通常要写resultType,使用了别名之后可以轻松的写入--&gt; &lt;typeAliases&gt; &lt;package name=&quot;com.atguigu.curd.pojo&quot;/&gt; &lt;/typeAliases&gt; &lt;!--分页插件的配置，这里不配置是无法生效的--&gt; &lt;plugins&gt; &lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt; &lt;!--分页参数合理化 --&gt; &lt;property name=&quot;reasonable&quot; value=&quot;true&quot;/&gt; &lt;/plugin&gt; &lt;/plugins&gt; MyBatis Generator可以参考官方文档主要就是一个数据库连接信息、javaBean生成策略、映射文件生成策略、Mapper接口生成策略、以及逆向分析的表。 &lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt; &lt;!-- 数据库的连接信息 --&gt; &lt;jdbcConnection driverClass=&quot;com.mysql.cj.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://localhost:3306/mybatis&quot; userId=&quot;root&quot; password=&quot;990506&quot;&gt; &lt;/jdbcConnection&gt; &lt;!-- javaBean的生成策略--&gt; &lt;javaModelGenerator targetPackage=&quot;com.atguigu.mybatis.pojo&quot; targetProject=&quot;.\\src\\main\\java&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt; &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt; &lt;/javaModelGenerator&gt; &lt;!-- SQL映射文件的生成策略 --&gt; &lt;sqlMapGenerator targetPackage=&quot;com.atguigu.mybatis.mapper&quot; targetProject=&quot;.\\src\\main\\resources&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt; &lt;/sqlMapGenerator&gt; &lt;!-- Mapper接口的生成策略 --&gt; &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.atguigu.mybatis.mapper&quot; targetProject=&quot;.\\src\\main\\java&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt; &lt;/javaClientGenerator&gt; &lt;!-- 逆向分析的表 --&gt; &lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt; &lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt; &lt;table tableName=&quot;t_emp&quot; domainObjectName=&quot;Emp&quot;/&gt; &lt;table tableName=&quot;t_dept&quot; domainObjectName=&quot;Dept&quot;/&gt; &lt;/context&gt; 到这里差不多结束啦，最后使用插件逆向建模即可。后续也会把我的SSM整合pull到我的网站上,算是一步步记录我的学习之路。 本文总阅读量次","categories":[{"name":"java","slug":"java","permalink":"https://www.zzzheng.top/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.zzzheng.top/tags/java/"},{"name":"spring","slug":"spring","permalink":"https://www.zzzheng.top/tags/spring/"},{"name":"springMVC","slug":"springMVC","permalink":"https://www.zzzheng.top/tags/springMVC/"},{"name":"MyBatis","slug":"MyBatis","permalink":"https://www.zzzheng.top/tags/MyBatis/"},{"name":"SSM","slug":"SSM","permalink":"https://www.zzzheng.top/tags/SSM/"}]},{"title":"my_site","slug":"my-site","date":"2022-08-25T12:28:55.000Z","updated":"2022-08-26T02:05:09.095Z","comments":true,"path":"2022/08/25/my-site/","link":"","permalink":"https://www.zzzheng.top/2022/08/25/my-site/","excerpt":"","text":"我的第一篇博客，不太会使用markdown，just a try！","categories":[],"tags":[]}],"categories":[{"name":"java","slug":"java","permalink":"https://www.zzzheng.top/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.zzzheng.top/tags/java/"},{"name":"spring","slug":"spring","permalink":"https://www.zzzheng.top/tags/spring/"},{"name":"springMVC","slug":"springMVC","permalink":"https://www.zzzheng.top/tags/springMVC/"},{"name":"MyBatis","slug":"MyBatis","permalink":"https://www.zzzheng.top/tags/MyBatis/"},{"name":"SSM","slug":"SSM","permalink":"https://www.zzzheng.top/tags/SSM/"}]}